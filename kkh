```python
import sys
versionNumber = sys.version_info.major
if versionNumber == 3:
    import tkinter
    import tkinter.simpledialog
    Tkinter = tkinter
    tkSimpleDialog = tkinter.simpledialog
else:
    import Tkinter
    import tkSimpleDialog

N = Tkinter.N
S = Tkinter.S
E = Tkinter.E
W = Tkinter.W
CENTER = Tkinter.CENTER
END = Tkinter.END
NORMAL = Tkinter.NORMAL
DISABLED = Tkinter.DISABLED
NONE = Tkinter.NONE
WORD = Tkinter.WORD
VERTICAL = Tkinter.VERTICAL
HORIZONTAL = Tkinter.HORIZONTAL
RAISED = Tkinter.RAISED
SINGLE = Tkinter.SINGLE
ACTIVE = Tkinter.ACTIVE

class EasyFrame(Tkinter.Frame):
    """Represents an application window."""

    def __init__(self, title = "", width = None, height = None,
                 background = "white", resizable = True):
        """Will shrink wrap the window around the widgets if width
        and height are not provided."""
        Tkinter.Frame.__init__(self, borderwidth = 4, relief = "sunken")
        if width and height:
            self.setSize(width, height)
        self.master.title(title)
        self.grid()
        # Expand the frame within the window
        self.master.rowconfigure(0, weight = 1)
        self.master.columnconfigure(0, weight = 1)
        self.grid(sticky = N+S+E+W)
        # Set the background color and resizability
        self.setBackground(background)
        self.setResizable(resizable)

    def setBackground(self, color):
        """Resets the window's background color to color."""
        self["background"] = color

    def setResizable(self, state):
        """Resets the window's resizable property to True
        or False."""
        self.master.resizable(state, state)

    def setSize(self, width, height):
        """Resets the window's width and height in pixels."""
        self.master.geometry(str(width)+ "x" + str(height))

    def setTitle(self, title):


def __init__(self, title = "", width = None, height = None,
             background = "white", resizable = True):
    """Will shrink wrap the window around the widgets if width
    and height are not provided."""
    Tkinter.Frame.__init__(self, borderwidth = 4, relief = "sunken")
    if width and height:
        self.setSize(width, height)
    self.master.title(title)
    self.grid()
    # Expand the frame within the window
    self.master.rowconfigure(0, weight = 1)
    self.master.columnconfigure(0, weight = 1)
    self.grid(sticky = N+S+E+W)
    # Set the background color and resizability
    self.setBackground(background)
    self.setResizable(resizable)

def setBackground(self, color):
    """Resets the window's background color to color."""
    self["background"] = color

def setResizable(self, state):
    """Resets the window's resizable property to True
    or False."""
    self.master.resizable(state, state)

def setSize(self, width, height):
    """Resets the window's width and height in pixels."""
    self.master.geometry(str(width)+ "x" + str(height))

def setTitle(self, title):
    """Resets the window's title to title."""
    self.master.title(title)

# Methods to add widgets to the window.  The row and column in
# the grid are required arguments.

def addLabel(self, text, row, column,
             columnspan = 1, rowspan = 1,
             sticky = N+W, font = None,
             background = "white", foreground = "black"):
    """Creates and inserts a label at the row and column,
    and returns the label."""
    label = Tkinter.Label(self, text = text, font = font,
                          background = background,
                          foreground = foreground)
    self.rowconfigure(row, weight = 1)
    self.columnconfigure(column, weight = 1)
    label.grid(row = row, column = column,
               columnspan = columnspan, rowspan = rowspan,
               padx = 5, pady = 5, sticky = sticky)
    return label

def addButton(self, text, row, column,
              columnspan = 1, rowspan = 1,
              command = lambda: None,
              state = NORMAL):
    """Creates and inserts a button at the row and column,
    and returns the button."""
    button = Tkinter.Button(self, text = text,
                            command = command, state = state)
    self.rowconfigure(row, weight = 1)
    self.columnconfigure(column, weight = 1)
    button.grid(row = row, column = column,
                columnspan = columnspan, rowspan = rowspan,
                padx = 5, pady = 5)
    return button

def addFloa